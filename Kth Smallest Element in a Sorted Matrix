class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        if (matrix.size() == 0){
            return -1;
        }
        int low = matrix[0][0];
        int high = matrix[matrix.size() - 1][matrix[0].size() - 1];
        int result = -1;
        while(low <= high){
            int mid = low + (high - low) / 2;            
            cout << "mid: " << mid << ", low: " << low <<" high: " << high<< endl;    
            int temp  = dfs(matrix, mid);
            cout << " temp: " << temp << endl;
           if (temp >=k){
                 result = mid;
                high = mid -1;
            }
            else{
                low = mid + 1;
            }
        }
       return result;
    }
    int dfs(vector<vector<int>>& matrix, int mid){
        int i = 0; 
        int j  = matrix.size() -1;
        int count = 0;
        while( j >=0 && i < matrix.size()){
            cout << "i: " << i << " j: " << j << endl;
            if (matrix[i][j] > mid){
                j--;
            }
            else{
                i++;
                count += j + 1;
            }
        }
        return count;
    }
};
